{"version":3,"sources":["Term.tsx","TermWindow.tsx","Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["chalk","level","enabled","term","allowTransparency","convertEol","fontSize","fontFamily","theme","background","black","Terminal","applyAddon","fit","Term","xterm","containerRef","React","createRef","cumulativeTimeout","onResizeWindow","_this","onResizeWindowUnbound","bind","Object","assertThisInitialized","this","open","current","startTyping","window","addEventListener","destroy","write","green","cyan","red","text","_this2","timeout","arguments","length","undefined","setTimeout","writeln","react_default","a","createElement","ref","Component","TermWindow","className","Term_Term","Card","props","icon","children","footer","Tags","tags","map","tag","i","key","App","contactButtons","href","target","index_es","faEnvelope","faLinkedin","faTwitterSquare","faTelegram","faMedium","TermWindow_TermWindow","faChevronCircleDown","id","Card_Card","faAddressBook","build","type","tooltipOnHover","user","faProjectDiagram","App_Tags","repo","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36cb629d.chunk.js","sourcesContent":["import React from 'react';\nimport { Terminal } from 'xterm';\nimport chalk from 'chalk';\n\nimport * as fit from 'xterm/lib/addons/fit/fit';\n\nchalk.level = 3;\nchalk.enabled = true;\n\nconst term = {\n    allowTransparency: true,\n    convertEol: true,\n    fontSize: 14,\n    fontFamily: 'Fira Code, Ubuntu Mono, Consolas, source-code-pro, courier-new, courier, monospace',\n    theme: {\n        background: '#000000',\n        black: '#000000',\n        // brightBlack: '#6272A4',\n        // brightBlue: '#D6ACFF',\n        // brightCyan: '#A4FFFF',\n        // brightGreen: '#69FF94',\n        // brightMagenta: '#FF92DF',\n        // brightRed: '#FF6E6E',\n        // brightWhite: '#FFFFFF',\n        // brightYellow: '#FFFFA5',\n        // blue: '#BD93F9',\n        // cyan: '#8BE9FD',\n        // green: '#50FA7B',\n        // magenta: '#FF79C6',\n        // red: '#FF5555',\n        // white: '#F8F8F2',\n        // yellow: '#F1FA8C',\n    },\n};\n\nTerminal.applyAddon(fit);\n\nexport default class Term extends React.Component<{}, {}> {\n    private xterm: Terminal|null = new Terminal(term);\n    private containerRef: React.RefObject < HTMLDivElement > = React.createRef();\n    private cumulativeTimeout = 0;\n    private onResizeWindow = this.onResizeWindowUnbound.bind(this);\n\n    public componentDidMount() {\n        this.xterm = new Terminal(term);\n        this.xterm.open(this.containerRef.current as HTMLElement);\n        (this.xterm as any).fit();\n\n        this.startTyping();\n\n        window.addEventListener('resize', this.onResizeWindow);\n    }\n\n    public componentWillUnmount() {\n        if (this.xterm) {\n            this.xterm.destroy();\n            this.xterm = null;\n        }\n\n        window.addEventListener('resize', this.onResizeWindow);\n    }\n\n    public startTyping() {\n        this.write(chalk.green(' λ ') + chalk.cyan('Hello!'), 500);\n        this.write(chalk.green(' λ ') + chalk.cyan('I\\'m ') + chalk.red('Gustavo'), 500);\n        this.write(chalk.green(' λ ') + chalk.cyan('A passionate software engineer'), 2000);\n        this.write(chalk.green(' λ ') + chalk.cyan('You can find my contact info and some of my projects below'), 2000);\n        this.write(chalk.green(' λ '));\n    }\n\n    public write(text: string, timeout: number = 1000) {\n        this.cumulativeTimeout = this.cumulativeTimeout + timeout;\n        setTimeout(() => this.xterm!.writeln(text), this.cumulativeTimeout);\n    }\n\n    public render() {\n        return <div ref={this.containerRef} />;\n    }\n\n    private onResizeWindowUnbound() {\n        if (this.xterm) {\n            (this.xterm as any).fit();\n        }\n    }\n}","import React from 'react';\nimport './TermWindow.scss';\n\nimport Term from \"./Term\";\n\nexport default class TermWindow extends React.Component<{}, {}> {\n\n    public render() {\n        return <div className=\"term\">\n            <div className=\"header\">\n                <div>_</div>\n                <div>□</div>\n                <div>x</div>\n            </div>\n\n            <Term />\n\n            <div className=\"footer\"></div>\n        </div>;\n    }\n\n}","import React from 'react';\n\nimport './Card.scss';\n\nexport interface CardProps {\n    title?: string;\n    icon: React.ReactNode;\n    footer?: React.ReactNode;\n}\n\nexport default class Card extends React.Component<CardProps, {}> {\n\n    public render() {\n        return <div className=\"card\">\n\n            <div className=\"header\">\n                {this.props.icon}\n            </div>\n\n            <div className=\"content\">\n                {this.props.children}\n            </div>\n\n            <div className=\"footer\">\n                {this.props.footer ? this.props.footer : ''}\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLinkedin, faTwitterSquare, faTelegram, faMedium } from '@fortawesome/free-brands-svg-icons'\nimport { faAddressBook, faChevronCircleDown, faEnvelope, faProjectDiagram } from '@fortawesome/free-solid-svg-icons'\nimport { Github } from 'react-social-github';\n\nimport './App.scss';\nimport TermWindow from './TermWindow';\nimport Card from './Card';\n\nconst CreateContactButtons: React.FC = () => {\n  return (\n    <div className=\"contact-buttons\">\n      <a href=\"mailto:gbritosampaio@gmail.com\" target=\"_blank\">\n        <FontAwesomeIcon icon={faEnvelope} />\n      </a>\n      <a href=\"https://www.linkedin.com/in/gbritosampaio\" target=\"_blank\">\n        <FontAwesomeIcon icon={faLinkedin} />\n      </a>\n      <a href=\"https://twitter.com/GustavoKatel\" target=\"_blank\">\n        <FontAwesomeIcon icon={faTwitterSquare} />\n      </a>\n      <a href=\"https://t.me/GustavoKatel\" target=\"_blank\">\n        <FontAwesomeIcon icon={faTelegram} />\n      </a>\n      <a href=\"https://medium.com/@gustavokatel\" target=\"_blank\">\n        <FontAwesomeIcon icon={faMedium} />\n      </a>\n    </div>\n  );\n}\n\ninterface TagsProps {\n  tags: string[];\n}\n\nconst Tags: React.FC<TagsProps> = (props) => {\n  const tags = props.tags || [];\n\n  return <div className=\"tags\">\n    {\n      tags.map((tag, i) => {\n        return <div key={i} className=\"tag\">{tag}</div>\n      })\n    }\n  </div>\n};\n\nconst App: React.FC = () => {\n  const contactButtons = CreateContactButtons({});\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TermWindow/>\n\n        <div className=\"scroll-down\">\n          <a href=\"#content\">\n            <FontAwesomeIcon icon={faChevronCircleDown} className=\"button animated bounce\" />\n          </a>\n        </div>\n      </header>\n\n      <div id=\"content\" className=\"App-content\">\n\n        <div className=\"contact-card\">\n          <Card icon={<FontAwesomeIcon icon={faAddressBook} />} footer={contactButtons}>\n            <Github type=\"widget\" tooltipOnHover={true} user=\"GustavoKatel\" ></Github>\n          </Card>\n        </div>\n\n        <div className=\"other-cards\">\n          <Card\n            icon={<FontAwesomeIcon icon={faProjectDiagram} />}\n            footer={\n              <Tags tags={[\n                'golang', 'react', 'electron',\n                'nodejs', 'rabbitmq', 'typescript', 'grpc'\n              ]} />\n            }\n          >\n            <Github type=\"widget\" tooltipOnHover={true} user=\"runletapp\" repo=\"runlet\" ></Github>\n          </Card>\n\n          <Card\n            icon={<FontAwesomeIcon icon={faProjectDiagram} />}\n            footer={\n              <Tags tags={[\n                'c++', 'python', 'pybind', 'ModSecurity', 'pytest', 'TDD', 'conda'\n              ]} />\n            }\n          >\n            <Github type=\"widget\" tooltipOnHover={true} user=\"actions-security\" repo=\"pymodsecurity\" ></Github>\n          </Card>\n\n          <Card\n            icon={<FontAwesomeIcon icon={faProjectDiagram} />}\n            footer={\n              <Tags tags={[\n                'python', 'django', 'ModSecurity', 'pytest', 'TDD', 'conda'\n              ]} />\n            }\n          >\n            <Github type=\"widget\" tooltipOnHover={true} user=\"GustavoKatel\" repo=\"django-pymodsecurity\" ></Github>\n          </Card>\n\n          <Card\n            icon={<FontAwesomeIcon icon={faProjectDiagram} />}\n            footer={\n              <Tags tags={[\n                'python', 'pushbullet api', 'pytest'\n              ]} />\n            }\n          >\n            <Github type=\"widget\" tooltipOnHover={true} user=\"GustavoKatel\" repo=\"pushbullet-cli\" ></Github>\n          </Card>\n\n          <Card\n            icon={<FontAwesomeIcon icon={faProjectDiagram} />}\n            footer={\n              <Tags tags={[\n                'c++', 'raytracing', 'qt'\n              ]} />\n            }\n          >\n            <Github type=\"widget\" tooltipOnHover={true} user=\"TecRen-UFPB\" repo=\"RayTracerQt\" ></Github>\n          </Card>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}